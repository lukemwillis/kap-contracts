syntax = "proto3";

package collections;

import "koinos/options.proto"; 

// KCS-2 Entrypoints START

// @description Returns the token's name
// @read-only true
// @result string_object
message name_arguments {
}

// @description Returns the token's symbol
// @read-only true
// @result string_object
message symbol_arguments {
}

// @description Returns the token's uri
// @read-only true
// @result string_object
message uri_arguments {
}

// @description Gets the total number of minted tokens
// @read-only true
// @result uint64_object
message total_supply_arguments {
}

// @description Returns collection royalties
// @read-only true
message royalties_arguments {
}
message royalties_result {
   repeated royalty_object value = 1;
}

// @description Unsupported
// @read-only false
// @result empty_object
message set_royalties_arguments {
   repeated royalty_object value = 1;
}

// @description Returns collection owner
// @read-only true
// @result bytes_address_object
message owner_arguments {
}

// @description Transfer ownership of the contract
// @read-only false
// @result empty_object
message transfer_ownership_arguments {
   bytes owner = 1 [(koinos.btype) = ADDRESS];
}

// @description Gets the balance of an owner
// @read-only true
// @result uint64_object
message balance_of_arguments {
   bytes owner = 1 [(koinos.btype) = ADDRESS];
}

// @description Gets the owner of a name
// @read-only true
// @result bytes_address_object
message owner_of_arguments {
  bytes token_id = 1 [(koinos.btype) = HEX];
}

// @description Gets approved address for a token
// @read-only true
// @result bytes_address_object
message get_approved_arguments {
  bytes token_id = 1 [(koinos.btype) = HEX];
}

// @description Checks if an operator is approved by an owner
// @read-only true
// @result bool_object
message is_approved_for_all_arguments {
   bytes owner = 1 [(koinos.btype) = ADDRESS];
   bytes operator = 2 [(koinos.btype) = ADDRESS];
}

/* 
  @description Mint a name or TLA
  @read-only false
  @result empty_object
*/
message mint_arguments {
  string name = 1;
  uint32 duration_increments = 2;
  bytes owner = 3 [(koinos.btype) = ADDRESS];
  bytes payment_from = 4 [(koinos.btype) = ADDRESS];
  bytes payment_token_address = 5 [(koinos.btype) = CONTRACT_ID];
  string promo_code = 6;
}

/* 
  @description Burn a name or TLA
  @read-only false
  @result empty_object
*/
message burn_arguments {
  bytes from = 1 [(koinos.btype) = ADDRESS];
  bytes token_id = 2 [(koinos.btype) = HEX];
}

/* 
  @description Transfer ownership of a name or TLA
  @read-only false
  @result empty_object
*/
message transfer_arguments {
  bytes from = 1 [(koinos.btype) = ADDRESS];
  bytes to = 2 [(koinos.btype) = ADDRESS];
  bytes token_id = 3 [(koinos.btype) = HEX];
}

// @description Approves an address to transfer a token
// @read-only false
// @result empty_object
message approve_arguments {
   bytes approver_address = 1 [(koinos.btype) = ADDRESS];
   bytes to = 2 [(koinos.btype) = ADDRESS];
   bytes token_id = 3 [(koinos.btype) = HEX];
}

// @description Approves or revokes an address to operate on all tokens owned by caller
// @read-only false
// @result empty_object
message set_approval_for_all_arguments {
   bytes approver_address = 1 [(koinos.btype) = ADDRESS];
   bytes operator_address = 2 [(koinos.btype) = ADDRESS];
   bool approved = 3;
}

// KCS-2 Entrypoints END

// KAP Entrypoints START

/* 
  @description Renew a name
  @read-only false
  @result empty_object
*/
message renew_arguments {
  string name = 1;
  uint32 duration_increments = 2;
  bytes payment_from = 3 [(koinos.btype) = ADDRESS];
  bytes payment_token_address = 4 [(koinos.btype) = CONTRACT_ID];
}

/* 
  @description Get name object
  @read-only true
  @result name_object
*/
message get_name_arguments {
  string name = 1;
}

/* 
  @description Get names that belong to an address
  @read-only true
*/
message get_names_arguments {
  bytes owner = 1 [(koinos.btype) = ADDRESS];
  string name_offset = 2;
  uint64 limit = 3 [jstype = JS_STRING];
  bool descending = 4;
}

message get_names_result {
  repeated name_object names = 1;
}

/* 
  @description Set contract metadata
  @read-only false
  @result empty_object
*/
message set_metadata_arguments {
  uint64 tla_mint_fee = 1;
  bytes kap_token_address = 2 [(koinos.btype) = CONTRACT_ID];
  bytes owner = 3 [(koinos.btype) = CONTRACT_ID];
}

/* 
  @description Get contract metadata
  @read-only true
  @result metadata_object
*/
message get_metadata_arguments {
}

// KAP Entrypoints END

// KCS-2 Events START
message mint_event {
  bytes to = 1 [(koinos.btype) = ADDRESS];
  bytes token_id = 2 [(koinos.btype) = HEX];
}

message burn_event {
  bytes from = 1 [(koinos.btype) = ADDRESS];
  bytes token_id = 2 [(koinos.btype) = HEX];
}

message transfer_event {
  bytes from = 1 [(koinos.btype) = ADDRESS];
  bytes to = 2 [(koinos.btype) = ADDRESS];
  bytes token_id = 3 [(koinos.btype) = HEX];
}

message operator_approval_event {
  bytes approver_address = 1 [(koinos.btype) = ADDRESS];
  bytes operator_address = 2 [(koinos.btype) = ADDRESS];
  bool approved = 3;
}

message token_approval_event {
  bytes approver_address = 1 [(koinos.btype) = ADDRESS];
  bytes to = 2 [(koinos.btype) = ADDRESS];
  bytes token_id = 3 [(koinos.btype) = HEX];
}

// KCS-2 Events END

// Objects
message empty_object {
}

message string_object {
  string value = 1;
}

message uint64_object {
  uint64 value = 1 [jstype = JS_STRING];
}

message bool_object {
   bool value = 1;
}

message bytes_address_object {
  bytes value = 1 [(koinos.btype) = ADDRESS];
}

message royalty_object {
   uint64 amount = 1 [jstype = JS_STRING];
   bytes address = 2 [(koinos.btype) = ADDRESS];
}

message token_approval_object {
   bytes address = 1 [(koinos.btype) = ADDRESS];
}

message operator_approval_key {
  bytes approver = 1 [(koinos.btype) = ADDRESS];
  bytes operator = 2 [(koinos.btype) = ADDRESS];
}

message operator_approval_object {
   bool approved = 1;
}

message metadata_object {
  uint64 tla_mint_fee = 1;
  bytes kap_token_address = 2 [(koinos.btype) = CONTRACT_ID];
  bytes owner = 3 [(koinos.btype) = CONTRACT_ID];
}

message name_object {
  string domain = 1;
  string name = 2;
  bytes owner = 3 [(koinos.btype) = ADDRESS];
  uint64 expiration = 4 [jstype = JS_STRING];
  uint64 grace_period_end = 5 [jstype = JS_STRING];
  uint64 sub_names_count = 6 [jstype = JS_STRING];
  uint64 locked_kap_tokens = 7  [jstype = JS_STRING];
}

message address_object {
  uint64 names_count = 1;
}

message owner_index_key {
  bytes owner = 1 [(koinos.btype) = ADDRESS];
  bytes name_hash = 2;
}

// External calls objects

message authorize_mint_args {
  string name = 1;
  string domain = 2;
  uint32 duration_increments = 3;
  bytes owner = 4 [(koinos.btype) = ADDRESS];
  bytes payment_from = 5 [(koinos.btype) = ADDRESS];
  bytes payment_token_address = 6 [(koinos.btype) = CONTRACT_ID];
  string promo_code = 7;
}

message authorize_mint_res {
  uint64 expiration = 1;
  uint64 grace_period_end = 2;
}

message authorize_burn_args {
  name_object name = 1;
}

message authorize_burn_res {
  bool authorized = 1;
}

message authorize_renewal_args {
  name_object name = 1;
  uint32 duration_increments = 2;
  bytes payment_from = 3 [(koinos.btype) = ADDRESS];
  bytes payment_token_address = 4 [(koinos.btype) = CONTRACT_ID];
}

message authorize_renewal_res {
  uint64 expiration = 1;
  uint64 grace_period_end = 2;
}

message authorize_reclaim_args {
  name_object name = 1;
}

message authorize_reclaim_res {
  bool authorized = 1;
}