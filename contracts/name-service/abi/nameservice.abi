{
    "methods": {
        "name": {
            "argument": "nameservice.name_arguments",
            "return": "nameservice.string_object",
            "description": "Returns the token's name",
            "entry-point": "0x82a3537f",
            "read-only": true
        },
        "symbol": {
            "argument": "nameservice.symbol_arguments",
            "return": "nameservice.string_object",
            "description": "Returns the token's symbol",
            "entry-point": "0xb76a7ca1",
            "read-only": true
        },
        "uri": {
            "argument": "nameservice.uri_arguments",
            "return": "nameservice.string_object",
            "description": "Returns the token's uri",
            "entry-point": "0x70e5d7b6",
            "read-only": true
        },
        "total_supply": {
            "argument": "nameservice.total_supply_arguments",
            "return": "nameservice.uint64_object",
            "description": "Gets the total number of minted tokens",
            "entry-point": "0xb0da3934",
            "read-only": true
        },
        "royalties": {
            "argument": "nameservice.royalties_arguments",
            "return": "nameservice.royalties_result",
            "description": "Returns collection royalties",
            "entry-point": "0x36e90cd0",
            "read-only": true
        },
        "set_royalties": {
            "argument": "nameservice.set_royalties_arguments",
            "return": "nameservice.empty_object",
            "description": "Unsupported",
            "entry-point": "0x3b5bb56b",
            "read-only": false
        },
        "owner": {
            "argument": "nameservice.owner_arguments",
            "return": "nameservice.bytes_address_object",
            "description": "Returns collection owner",
            "entry-point": "0x4c102969",
            "read-only": true
        },
        "transfer_ownership": {
            "argument": "nameservice.transfer_ownership_arguments",
            "return": "nameservice.empty_object",
            "description": "Unsupported",
            "entry-point": "0x394be702",
            "read-only": false
        },
        "balance_of": {
            "argument": "nameservice.balance_of_arguments",
            "return": "nameservice.uint64_object",
            "description": "Gets the balance of an owner",
            "entry-point": "0x5c721497",
            "read-only": true
        },
        "owner_of": {
            "argument": "nameservice.owner_of_arguments",
            "return": "nameservice.owner_of_result",
            "description": "Gets the owner of a name",
            "entry-point": "0xed61c847",
            "read-only": true
        },
        "get_approved": {
            "argument": "nameservice.get_approved_arguments",
            "return": "nameservice.bytes_address_object",
            "description": "Gets approved address for a token",
            "entry-point": "0x4c731020",
            "read-only": true
        },
        "is_approved_for_all": {
            "argument": "nameservice.is_approved_for_all_arguments",
            "return": "nameservice.bool_object",
            "description": "Checks if an operator is approved by an owner",
            "entry-point": "0xe7ab8ce5",
            "read-only": true
        },
        "mint": {
            "argument": "nameservice.mint_arguments",
            "return": "nameservice.empty_object",
            "description": "Mint a name or TLA",
            "entry-point": "0xdc6f17bb",
            "read-only": false
        },
        "transfer": {
            "argument": "nameservice.transfer_arguments",
            "return": "nameservice.empty_object",
            "description": "Transfer ownership of a name or TLA",
            "entry-point": "0x27f576ca",
            "read-only": false
        },
        "approve": {
            "argument": "nameservice.approve_arguments",
            "return": "nameservice.empty_object",
            "description": "Approves an address to transfer a token",
            "entry-point": "0x74e21680",
            "read-only": false
        },
        "set_approval_for_all": {
            "argument": "nameservice.set_approval_for_all_arguments",
            "return": "nameservice.empty_object",
            "description": "Approves or revokes an address to operate on all tokens owned by caller",
            "entry-point": "0x20442216",
            "read-only": false
        },
        "burn": {
            "argument": "nameservice.burn_arguments",
            "return": "nameservice.empty_object",
            "description": "Burn a name or TLA",
            "entry-point": "0x859facc5",
            "read-only": false
        },
        "renew": {
            "argument": "nameservice.renew_arguments",
            "return": "nameservice.empty_object",
            "description": "Renew a name",
            "entry-point": "0xa36a2ce1",
            "read-only": false
        },
        "get_name": {
            "argument": "nameservice.get_name_arguments",
            "return": "nameservice.name_object",
            "description": "Get name object",
            "entry-point": "0xe5070a16",
            "read-only": true
        },
        "get_names": {
            "argument": "nameservice.get_names_arguments",
            "return": "nameservice.get_names_result",
            "description": "Get names that belong to an address",
            "entry-point": "0xcd5c6518",
            "read-only": true
        },
        "set_metadata": {
            "argument": "nameservice.set_metadata_arguments",
            "return": "nameservice.empty_object",
            "description": "Set contract metadata",
            "entry-point": "0x3d59af19",
            "read-only": false
        },
        "get_metadata": {
            "argument": "nameservice.get_metadata_arguments",
            "return": "nameservice.metadata_object",
            "description": "Get contract metadata",
            "entry-point": "0xfcf7a68f",
            "read-only": true
        }
    },
    "types": "CrYfCiBhc3NlbWJseS9wcm90by9uYW1lc2VydmljZS5wcm90bxILbmFtZXNlcnZpY2UaFGtvaW5vcy9vcHRpb25zLnByb3RvIhAKDm5hbWVfYXJndW1lbnRzIhIKEHN5bWJvbF9hcmd1bWVudHMiDwoNdXJpX2FyZ3VtZW50cyIYChZ0b3RhbF9zdXBwbHlfYXJndW1lbnRzIhUKE3JveWFsdGllc19hcmd1bWVudHMiRQoQcm95YWx0aWVzX3Jlc3VsdBIxCgV2YWx1ZRgBIAMoCzIbLm5hbWVzZXJ2aWNlLnJveWFsdHlfb2JqZWN0UgV2YWx1ZSJMChdzZXRfcm95YWx0aWVzX2FyZ3VtZW50cxIxCgV2YWx1ZRgBIAMoCzIbLm5hbWVzZXJ2aWNlLnJveWFsdHlfb2JqZWN0UgV2YWx1ZSIRCg9vd25lcl9hcmd1bWVudHMiOgocdHJhbnNmZXJfb3duZXJzaGlwX2FyZ3VtZW50cxIaCgVvd25lchgBIAEoDEIEgLUYBlIFb3duZXIiMgoUYmFsYW5jZV9vZl9hcmd1bWVudHMSGgoFb3duZXIYASABKAxCBIC1GAZSBW93bmVyIigKEm93bmVyX29mX2FyZ3VtZW50cxISCgRuYW1lGAEgASgJUgRuYW1lIi0KD293bmVyX29mX3Jlc3VsdBIaCgV2YWx1ZRgBIAEoDEIEgLUYBlIFdmFsdWUiLAoWZ2V0X2FwcHJvdmVkX2FyZ3VtZW50cxISCgRuYW1lGAEgASgJUgRuYW1lIl0KHWlzX2FwcHJvdmVkX2Zvcl9hbGxfYXJndW1lbnRzEhoKBW93bmVyGAEgASgMQgSAtRgGUgVvd25lchIgCghvcGVyYXRvchgCIAEoDEIEgLUYBlIIb3BlcmF0b3Ii1AEKDm1pbnRfYXJndW1lbnRzEhIKBG5hbWUYASABKAlSBG5hbWUSLwoTZHVyYXRpb25faW5jcmVtZW50cxgCIAEoDVISZHVyYXRpb25JbmNyZW1lbnRzEhoKBW93bmVyGAMgASgMQgSAtRgGUgVvd25lchInCgxwYXltZW50X2Zyb20YBCABKAxCBIC1GAZSC3BheW1lbnRGcm9tEjgKFXBheW1lbnRfdG9rZW5fYWRkcmVzcxgFIAEoDEIEgLUYBVITcGF5bWVudFRva2VuQWRkcmVzcyJYChJ0cmFuc2Zlcl9hcmd1bWVudHMSEgoEbmFtZRgBIAEoCVIEbmFtZRIYCgRmcm9tGAIgASgMQgSAtRgGUgRmcm9tEhQKAnRvGAMgASgMQgSAtRgGUgJ0byJuChFhcHByb3ZlX2FyZ3VtZW50cxIvChBhcHByb3Zlcl9hZGRyZXNzGAEgASgMQgSAtRgGUg9hcHByb3ZlckFkZHJlc3MSFAoCdG8YAiABKAxCBIC1GAZSAnRvEhIKBG5hbWUYAyABKAlSBG5hbWUingEKHnNldF9hcHByb3ZhbF9mb3JfYWxsX2FyZ3VtZW50cxIvChBhcHByb3Zlcl9hZGRyZXNzGAEgASgMQgSAtRgGUg9hcHByb3ZlckFkZHJlc3MSLwoQb3BlcmF0b3JfYWRkcmVzcxgCIAEoDEIEgLUYBlIPb3BlcmF0b3JBZGRyZXNzEhoKCGFwcHJvdmVkGAMgASgIUghhcHByb3ZlZCIkCg5idXJuX2FyZ3VtZW50cxISCgRuYW1lGAEgASgJUgRuYW1lIrkBCg9yZW5ld19hcmd1bWVudHMSEgoEbmFtZRgBIAEoCVIEbmFtZRIvChNkdXJhdGlvbl9pbmNyZW1lbnRzGAIgASgNUhJkdXJhdGlvbkluY3JlbWVudHMSJwoMcGF5bWVudF9mcm9tGAMgASgMQgSAtRgGUgtwYXltZW50RnJvbRI4ChVwYXltZW50X3Rva2VuX2FkZHJlc3MYBCABKAxCBIC1GAVSE3BheW1lbnRUb2tlbkFkZHJlc3MiKAoSZ2V0X25hbWVfYXJndW1lbnRzEhIKBG5hbWUYASABKAlSBG5hbWUijAEKE2dldF9uYW1lc19hcmd1bWVudHMSGgoFb3duZXIYASABKAxCBIC1GAZSBW93bmVyEh8KC25hbWVfb2Zmc2V0GAIgASgJUgpuYW1lT2Zmc2V0EhgKBWxpbWl0GAMgASgEQgIwAVIFbGltaXQSHgoKZGVzY2VuZGluZxgEIAEoCFIKZGVzY2VuZGluZyJCChBnZXRfbmFtZXNfcmVzdWx0Ei4KBW5hbWVzGAEgAygLMhgubmFtZXNlcnZpY2UubmFtZV9vYmplY3RSBW5hbWVzIogBChZzZXRfbWV0YWRhdGFfYXJndW1lbnRzEiAKDHRsYV9taW50X2ZlZRgBIAEoBFIKdGxhTWludEZlZRIwChFrYXBfdG9rZW5fYWRkcmVzcxgCIAEoDEIEgLUYBVIPa2FwVG9rZW5BZGRyZXNzEhoKBW93bmVyGAMgASgMQgSAtRgFUgVvd25lciIYChZnZXRfbWV0YWRhdGFfYXJndW1lbnRzIiAKCm1pbnRfZXZlbnQSEgoEbmFtZRgBIAEoCVIEbmFtZSIgCgpidXJuX2V2ZW50EhIKBG5hbWUYASABKAlSBG5hbWUiJAoOdHJhbnNmZXJfZXZlbnQSEgoEbmFtZRgDIAEoCVIEbmFtZSI1ChdvcGVyYXRvcl9hcHByb3ZhbF9ldmVudBIaCghhcHByb3ZlZBgBIAEoCFIIYXBwcm92ZWQiKgoUdG9rZW5fYXBwcm92YWxfZXZlbnQSEgoEbmFtZRgDIAEoCVIEbmFtZSIOCgxlbXB0eV9vYmplY3QiJQoNc3RyaW5nX29iamVjdBIUCgV2YWx1ZRgBIAEoCVIFdmFsdWUiKQoNdWludDY0X29iamVjdBIYCgV2YWx1ZRgBIAEoBEICMAFSBXZhbHVlIiMKC2Jvb2xfb2JqZWN0EhQKBXZhbHVlGAEgASgIUgV2YWx1ZSIyChRieXRlc19hZGRyZXNzX29iamVjdBIaCgV2YWx1ZRgCIAEoDEIEgLUYBlIFdmFsdWUiTAoOcm95YWx0eV9vYmplY3QSGgoGYW1vdW50GAEgASgEQgIwAVIGYW1vdW50Eh4KB2FkZHJlc3MYAiABKAxCBIC1GAZSB2FkZHJlc3MiNwoVdG9rZW5fYXBwcm92YWxfb2JqZWN0Eh4KB2FkZHJlc3MYASABKAxCBIC1GAZSB2FkZHJlc3MiWwoVb3BlcmF0b3JfYXBwcm92YWxfa2V5EiAKCGFwcHJvdmVyGAEgASgMQgSAtRgGUghhcHByb3ZlchIgCghvcGVyYXRvchgCIAEoDEIEgLUYBlIIb3BlcmF0b3IiNgoYb3BlcmF0b3JfYXBwcm92YWxfb2JqZWN0EhoKCGFwcHJvdmVkGAEgASgIUghhcHByb3ZlZCKBAQoPbWV0YWRhdGFfb2JqZWN0EiAKDHRsYV9taW50X2ZlZRgBIAEoBFIKdGxhTWludEZlZRIwChFrYXBfdG9rZW5fYWRkcmVzcxgCIAEoDEIEgLUYBVIPa2FwVG9rZW5BZGRyZXNzEhoKBW93bmVyGAMgASgMQgSAtRgFUgVvd25lciKDAgoLbmFtZV9vYmplY3QSFgoGZG9tYWluGAEgASgJUgZkb21haW4SEgoEbmFtZRgCIAEoCVIEbmFtZRIaCgVvd25lchgDIAEoDEIEgLUYBlIFb3duZXISIgoKZXhwaXJhdGlvbhgEIAEoBEICMAFSCmV4cGlyYXRpb24SLAoQZ3JhY2VfcGVyaW9kX2VuZBgFIAEoBEICMAFSDmdyYWNlUGVyaW9kRW5kEioKD3N1Yl9uYW1lc19jb3VudBgGIAEoBEICMAFSDXN1Yk5hbWVzQ291bnQSLgoRbG9ja2VkX2thcF90b2tlbnMYByABKARCAjABUg9sb2NrZWRLYXBUb2tlbnMiMQoOYWRkcmVzc19vYmplY3QSHwoLbmFtZXNfY291bnQYASABKARSCm5hbWVzQ291bnQiSgoPb3duZXJfaW5kZXhfa2V5EhoKBW93bmVyGAEgASgMQgSAtRgGUgVvd25lchIbCgluYW1lX2hhc2gYAiABKAxSCG5hbWVIYXNoIvEBChNhdXRob3JpemVfbWludF9hcmdzEhIKBG5hbWUYASABKAlSBG5hbWUSFgoGZG9tYWluGAIgASgJUgZkb21haW4SLwoTZHVyYXRpb25faW5jcmVtZW50cxgDIAEoDVISZHVyYXRpb25JbmNyZW1lbnRzEhoKBW93bmVyGAQgASgMQgSAtRgGUgVvd25lchInCgxwYXltZW50X2Zyb20YBSABKAxCBIC1GAZSC3BheW1lbnRGcm9tEjgKFXBheW1lbnRfdG9rZW5fYWRkcmVzcxgGIAEoDEIEgLUYBVITcGF5bWVudFRva2VuQWRkcmVzcyJeChJhdXRob3JpemVfbWludF9yZXMSHgoKZXhwaXJhdGlvbhgBIAEoBFIKZXhwaXJhdGlvbhIoChBncmFjZV9wZXJpb2RfZW5kGAIgASgEUg5ncmFjZVBlcmlvZEVuZCJDChNhdXRob3JpemVfYnVybl9hcmdzEiwKBG5hbWUYASABKAsyGC5uYW1lc2VydmljZS5uYW1lX29iamVjdFIEbmFtZSI0ChJhdXRob3JpemVfYnVybl9yZXMSHgoKYXV0aG9yaXplZBgBIAEoCFIKYXV0aG9yaXplZCLaAQoWYXV0aG9yaXplX3JlbmV3YWxfYXJncxIsCgRuYW1lGAEgASgLMhgubmFtZXNlcnZpY2UubmFtZV9vYmplY3RSBG5hbWUSLwoTZHVyYXRpb25faW5jcmVtZW50cxgCIAEoDVISZHVyYXRpb25JbmNyZW1lbnRzEicKDHBheW1lbnRfZnJvbRgDIAEoDEIEgLUYBlILcGF5bWVudEZyb20SOAoVcGF5bWVudF90b2tlbl9hZGRyZXNzGAQgASgMQgSAtRgFUhNwYXltZW50VG9rZW5BZGRyZXNzImEKFWF1dGhvcml6ZV9yZW5ld2FsX3JlcxIeCgpleHBpcmF0aW9uGAEgASgEUgpleHBpcmF0aW9uEigKEGdyYWNlX3BlcmlvZF9lbmQYAiABKARSDmdyYWNlUGVyaW9kRW5kIkYKFmF1dGhvcml6ZV9yZWNsYWltX2FyZ3MSLAoEbmFtZRgBIAEoCzIYLm5hbWVzZXJ2aWNlLm5hbWVfb2JqZWN0UgRuYW1lIjcKFWF1dGhvcml6ZV9yZWNsYWltX3JlcxIeCgphdXRob3JpemVkGAEgASgIUgphdXRob3JpemVkYgZwcm90bzMK5wMKHGtvaW5vcy9jaGFpbi9hdXRob3JpdHkucHJvdG8SDGtvaW5vcy5jaGFpbhoUa29pbm9zL29wdGlvbnMucHJvdG8iVQoLY2FsbF90YXJnZXQSJQoLY29udHJhY3RfaWQYASABKAxCBIC1GAZSCmNvbnRyYWN0SWQSHwoLZW50cnlfcG9pbnQYAiABKA1SCmVudHJ5UG9pbnQiiAEKE2F1dGhvcml6ZV9hcmd1bWVudHMSNAoEdHlwZRgBIAEoDjIgLmtvaW5vcy5jaGFpbi5hdXRob3JpemF0aW9uX3R5cGVSBHR5cGUSMgoEY2FsbBgCIAEoCzIZLmtvaW5vcy5jaGFpbi5jYWxsX3RhcmdldEgAUgRjYWxsiAEBQgcKBV9jYWxsIigKEGF1dGhvcml6ZV9yZXN1bHQSFAoFdmFsdWUYASABKAhSBXZhbHVlKlkKEmF1dGhvcml6YXRpb25fdHlwZRIRCg1jb250cmFjdF9jYWxsEAASGwoXdHJhbnNhY3Rpb25fYXBwbGljYXRpb24QARITCg9jb250cmFjdF91cGxvYWQQAkI0WjJnaXRodWIuY29tL2tvaW5vcy9rb2lub3MtcHJvdG8tZ29sYW5nL2tvaW5vcy9jaGFpbmIGcHJvdG8z"
}