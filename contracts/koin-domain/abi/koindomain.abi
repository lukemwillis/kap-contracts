{
    "methods": {
        "authorize_mint": {
            "argument": "koindomain.authorize_mint_arguments",
            "return": "koindomain.authorize_mint_result",
            "description": "Authorize the mint of a name",
            "entry-point": "0x86cb119c",
            "read-only": false
        },
        "authorize_burn": {
            "argument": "koindomain.authorize_burn_arguments",
            "return": "koindomain.authorize_burn_result",
            "description": "Authorize the burn of a name",
            "entry-point": "0x0d95d6b8",
            "read-only": false
        },
        "authorize_renewal": {
            "argument": "koindomain.authorize_renewal_arguments",
            "return": "koindomain.authorize_renewal_result",
            "description": "Authorize the renewal of a name",
            "entry-point": "0xfc54a97f",
            "read-only": false
        },
        "get_purchases": {
            "argument": "koindomain.get_purchases_arguments",
            "return": "koindomain.get_purchases_result",
            "description": "Get purchases",
            "entry-point": "0x919e92bb",
            "read-only": true
        },
        "get_referral_allowance": {
            "argument": "koindomain.get_referral_allowance_arguments",
            "return": "koindomain.referral_allowance",
            "description": "Get referral allowance for a name",
            "entry-point": "0x67aeb5b2",
            "read-only": true
        },
        "set_metadata": {
            "argument": "koindomain.set_metadata_arguments",
            "return": "koindomain.empty_object",
            "description": "Set contract metadata",
            "entry-point": "0x3d59af19",
            "read-only": false
        },
        "get_metadata": {
            "argument": "koindomain.get_metadata_arguments",
            "return": "koindomain.metadata_object",
            "description": "Get contract metadata",
            "entry-point": "0xfcf7a68f",
            "read-only": true
        }
    },
    "types": "CtAaCh9hc3NlbWJseS9wcm90by9rb2luZG9tYWluLnByb3RvEgprb2luZG9tYWluGhRrb2lub3Mvb3B0aW9ucy5wcm90byKKAgoYYXV0aG9yaXplX21pbnRfYXJndW1lbnRzEhIKBG5hbWUYASABKAlSBG5hbWUSFgoGZG9tYWluGAIgASgJUgZkb21haW4SLwoTZHVyYXRpb25faW5jcmVtZW50cxgDIAEoDVISZHVyYXRpb25JbmNyZW1lbnRzEhoKBW93bmVyGAQgASgMQgSAtRgGUgVvd25lchInCgxwYXltZW50X2Zyb20YBSABKAxCBIC1GAZSC3BheW1lbnRGcm9tEjgKFXBheW1lbnRfdG9rZW5fYWRkcmVzcxgGIAEoDEIEgLUYBVITcGF5bWVudFRva2VuQWRkcmVzcxISCgRkYXRhGAcgASgMUgRkYXRhImEKFWF1dGhvcml6ZV9taW50X3Jlc3VsdBIeCgpleHBpcmF0aW9uGAEgASgEUgpleHBpcmF0aW9uEigKEGdyYWNlX3BlcmlvZF9lbmQYAiABKARSDmdyYWNlUGVyaW9kRW5kIkcKGGF1dGhvcml6ZV9idXJuX2FyZ3VtZW50cxIrCgRuYW1lGAEgASgLMhcua29pbmRvbWFpbi5uYW1lX29iamVjdFIEbmFtZSI3ChVhdXRob3JpemVfYnVybl9yZXN1bHQSHgoKYXV0aG9yaXplZBgBIAEoCFIKYXV0aG9yaXplZCLeAQobYXV0aG9yaXplX3JlbmV3YWxfYXJndW1lbnRzEisKBG5hbWUYASABKAsyFy5rb2luZG9tYWluLm5hbWVfb2JqZWN0UgRuYW1lEi8KE2R1cmF0aW9uX2luY3JlbWVudHMYAiABKA1SEmR1cmF0aW9uSW5jcmVtZW50cxInCgxwYXltZW50X2Zyb20YAyABKAxCBIC1GAZSC3BheW1lbnRGcm9tEjgKFXBheW1lbnRfdG9rZW5fYWRkcmVzcxgEIAEoDEIEgLUYBVITcGF5bWVudFRva2VuQWRkcmVzcyJkChhhdXRob3JpemVfcmVuZXdhbF9yZXN1bHQSHgoKZXhwaXJhdGlvbhgBIAEoBFIKZXhwaXJhdGlvbhIoChBncmFjZV9wZXJpb2RfZW5kGAIgASgEUg5ncmFjZVBlcmlvZEVuZCKFAQoXZ2V0X3B1cmNoYXNlc19hcmd1bWVudHMSEgoEbmFtZRgBIAEoCVIEbmFtZRIgCgl0aW1lc3RhbXAYAiABKARCAjABUgl0aW1lc3RhbXASFAoFbGltaXQYAyABKA1SBWxpbWl0Eh4KCmRlc2NlbmRpbmcYBCABKAhSCmRlc2NlbmRpbmciUQoUZ2V0X3B1cmNoYXNlc19yZXN1bHQSOQoJcHVyY2hhc2VzGAEgAygLMhsua29pbmRvbWFpbi5wdXJjaGFzZV9vYmplY3RSCXB1cmNoYXNlcyI2CiBnZXRfcmVmZXJyYWxfYWxsb3dhbmNlX2FyZ3VtZW50cxISCgRuYW1lGAEgASgJUgRuYW1lIlEKFnNldF9tZXRhZGF0YV9hcmd1bWVudHMSNwoIbWV0YWRhdGEYASABKAsyGy5rb2luZG9tYWluLm1ldGFkYXRhX29iamVjdFIIbWV0YWRhdGEiGAoWZ2V0X21ldGFkYXRhX2FyZ3VtZW50cyJEChdnZXRfbGFzdF91c2RfcHJpY2VfYXJncxIpCg10b2tlbl9hZGRyZXNzGAEgASgMQgSAtRgFUgx0b2tlbkFkZHJlc3MiTAoWZ2V0X2xhc3RfdXNkX3ByaWNlX3JlcxIUCgVwcmljZRgBIAEoBFIFcHJpY2USHAoJdGltZXN0YW1wGAIgASgEUgl0aW1lc3RhbXAiMQoTYmFsYW5jZV9vZl9uZnRfYXJncxIaCgVvd25lchgBIAEoDEIEgLUYBlIFb3duZXIiLgoSYmFsYW5jZV9vZl9uZnRfcmVzEhgKBXZhbHVlGAEgASgEQgIwAVIFdmFsdWUiWwoZcmVkZWVtX3JlZmVycmFsX2NvZGVfYXJncxI+Cg1yZWZlcnJhbF9jb2RlGAEgASgLMhkua29pbmRvbWFpbi5yZWZlcnJhbF9jb2RlUgxyZWZlcnJhbENvZGUiDgoMZW1wdHlfb2JqZWN0IoMCCgtuYW1lX29iamVjdBIWCgZkb21haW4YASABKAlSBmRvbWFpbhISCgRuYW1lGAIgASgJUgRuYW1lEhoKBW93bmVyGAMgASgMQgSAtRgGUgVvd25lchIiCgpleHBpcmF0aW9uGAQgASgEQgIwAVIKZXhwaXJhdGlvbhIsChBncmFjZV9wZXJpb2RfZW5kGAUgASgEQgIwAVIOZ3JhY2VQZXJpb2RFbmQSKgoPc3ViX25hbWVzX2NvdW50GAYgASgEQgIwAVINc3ViTmFtZXNDb3VudBIuChFsb2NrZWRfa2FwX3Rva2VucxgHIAEoBEICMAFSD2xvY2tlZEthcFRva2VucyKnBAoPbWV0YWRhdGFfb2JqZWN0EjUKE25hbWVzZXJ2aWNlX2FkZHJlc3MYASABKAxCBIC1GAVSEm5hbWVzZXJ2aWNlQWRkcmVzcxIrCg5vcmFjbGVfYWRkcmVzcxgCIAEoDEIEgLUYBVINb3JhY2xlQWRkcmVzcxIaCgVvd25lchgDIAEoDEIEgLUYBVIFb3duZXISNAoTcHJlc3NfYmFkZ2VfYWRkcmVzcxgEIAEoDEIEgLUYBVIRcHJlc3NCYWRnZUFkZHJlc3MSHwoLaXNfbGF1bmNoZWQYBSABKAhSCmlzTGF1bmNoZWQSJgoLYmVuZWZpY2lhcnkYBiABKAxCBIC1GAVSC2JlbmVmaWNpYXJ5EkAKGXJlZmVycmFsX2NvbnRyYWN0X2FkZHJlc3MYByABKAxCBIC1GAVSF3JlZmVycmFsQ29udHJhY3RBZGRyZXNzEjwKGHJlZmVycmFsc19yZWZyZXNoX3BlcmlvZBgIIAEoBEICMAFSFnJlZmVycmFsc1JlZnJlc2hQZXJpb2QSOwoYbWF4X3JlZmVycmFsc19wZXJfcGVyaW9kGAkgASgEQgIwAVIVbWF4UmVmZXJyYWxzUGVyUGVyaW9kElgKKXByZW1pdW1fYWNjb3VudF9yZWZlcnJhbF9kaXNjb3VudF9wZXJjZW50GAogASgNUiVwcmVtaXVtQWNjb3VudFJlZmVycmFsRGlzY291bnRQZXJjZW50IoYBCg9wdXJjaGFzZV9vYmplY3QSGgoFYnV5ZXIYASABKAxCBIC1GAZSBWJ1eWVyEhIKBG5hbWUYAiABKAlSBG5hbWUSIQoKdXNkX2Ftb3VudBgDIAEoBEICMAFSCXVzZEFtb3VudBIgCgl0aW1lc3RhbXAYBCABKARCAjABUgl0aW1lc3RhbXAiRAoMcHVyY2hhc2Vfa2V5EhIKBG5hbWUYASABKAlSBG5hbWUSIAoJdGltZXN0YW1wGAIgASgEQgIwAVIJdGltZXN0YW1wIlAKD3B1cmNoYXNlX3JlY29yZBIaCgVidXllchgBIAEoDEIEgLUYBlIFYnV5ZXISIQoKdXNkX2Ftb3VudBgCIAEoBEICMAFSCXVzZEFtb3VudCIjCg1nZXRfbmFtZV9hcmdzEhIKBG5hbWUYASABKAlSBG5hbWUigAEKEnJlZmVycmFsX2FsbG93YW5jZRIhCgptYXhfYW1vdW50GAEgASgEQgIwAVIJbWF4QW1vdW50EiAKCXJlbWFpbmluZxgCIAEoBEICMAFSCXJlbWFpbmluZxIlCgxuZXh0X3JlZnJlc2gYAyABKARCAjABUgtuZXh0UmVmcmVzaCL9AgoWcmVmZXJyYWxfY29kZV9tZXRhZGF0YRIZCghjaGFpbl9pZBgBIAEoDFIHY2hhaW5JZBI2ChRyZWZlcnJhbF9jb250cmFjdF9pZBgCIAEoDEIEgLUYBVIScmVmZXJyYWxDb250cmFjdElkEhwKBmlzc3VlchgDIAEoDEIEgLUYBlIGaXNzdWVyEicKDWlzc3VhbmNlX2RhdGUYBCABKARCAjABUgxpc3N1YW5jZURhdGUSKwoPZXhwaXJhdGlvbl9kYXRlGAUgASgEQgIwAVIOZXhwaXJhdGlvbkRhdGUSRAobYWxsb3dlZF9yZWRlbXB0aW9uX2NvbnRyYWN0GAYgASgMQgSAtRgFUhlhbGxvd2VkUmVkZW1wdGlvbkNvbnRyYWN0EkIKGmFsbG93ZWRfcmVkZW1wdGlvbl9hY2NvdW50GAcgASgMQgSAtRgGUhhhbGxvd2VkUmVkZW1wdGlvbkFjY291bnQSEgoEZGF0YRgIIAEoDFIEZGF0YSJtCg1yZWZlcnJhbF9jb2RlEj4KCG1ldGFkYXRhGAEgASgLMiIua29pbmRvbWFpbi5yZWZlcnJhbF9jb2RlX21ldGFkYXRhUghtZXRhZGF0YRIcCglzaWduYXR1cmUYAiABKAxSCXNpZ25hdHVyZWIGcHJvdG8zCucDChxrb2lub3MvY2hhaW4vYXV0aG9yaXR5LnByb3RvEgxrb2lub3MuY2hhaW4aFGtvaW5vcy9vcHRpb25zLnByb3RvIlUKC2NhbGxfdGFyZ2V0EiUKC2NvbnRyYWN0X2lkGAEgASgMQgSAtRgGUgpjb250cmFjdElkEh8KC2VudHJ5X3BvaW50GAIgASgNUgplbnRyeVBvaW50IogBChNhdXRob3JpemVfYXJndW1lbnRzEjQKBHR5cGUYASABKA4yIC5rb2lub3MuY2hhaW4uYXV0aG9yaXphdGlvbl90eXBlUgR0eXBlEjIKBGNhbGwYAiABKAsyGS5rb2lub3MuY2hhaW4uY2FsbF90YXJnZXRIAFIEY2FsbIgBAUIHCgVfY2FsbCIoChBhdXRob3JpemVfcmVzdWx0EhQKBXZhbHVlGAEgASgIUgV2YWx1ZSpZChJhdXRob3JpemF0aW9uX3R5cGUSEQoNY29udHJhY3RfY2FsbBAAEhsKF3RyYW5zYWN0aW9uX2FwcGxpY2F0aW9uEAESEwoPY29udHJhY3RfdXBsb2FkEAJCNFoyZ2l0aHViLmNvbS9rb2lub3Mva29pbm9zLXByb3RvLWdvbGFuZy9rb2lub3MvY2hhaW5iBnByb3RvMw=="
}